SOURCE_DIR=/Users/hemant/distribution-macOS/xnu
export CONFIG_DEFINES = -DINET -DMACH -DVLAN -DBOND -DIF_FAKE -DIF_HEADLESS -DIF_REDIRECT -DAH_ALL_CRYPTO -DPF -DPFLOG -DDUMMYNET -DTRAFFIC_MGT -DMULTICAST -DIFNET_INPUT_SANITY_CHK -DMULTIPATH -DMPTCP -DSYSV_SEM -DSYSV_MSG -DSYSV_SHM -DPSYNCH -DFLOW_DIVERT -DNECP -DCONTENT_FILTER -DPACKET_MANGLER -DREMOTE_VIF -DSKYWALK -DCONFIG_NEXUS_USER_PIPE -DCONFIG_NEXUS_KERNEL_PIPE -DCONFIG_NEXUS_MONITOR -DCONFIG_NEXUS_FLOWSWITCH -DCONFIG_NEXUS_NETIF -DKCTL_TEST -DSOCKETS -DSENDFILE -DCONFIG_FSE -DCONFIG_IMAGEBOOT -DCONFIG_MBUF_JUMBO -DFIFO -DFDESC -DDEVFS -DNULLFS -DFS_COMPRESSION -DQUOTA -DNAMEDSTREAMS -DCONFIG_APPLEDOUBLE -DCONFIG_VOLFS -DCONFIG_IMGSRC_ACCESS -DCONFIG_TRIGGERS -DCONFIG_EXT_RESOLVER -DCONFIG_SEARCHFS -DCONFIG_MNT_SUID -DCONFIG_MNT_ROOTSNAP -DCONFIG_ROSV_STARTUP -DCONFIG_FIRMLINKS -DCONFIG_MOUNT_VM -DCONFIG_MOUNT_PREBOOTRECOVERY -DCONFIG_DATALESS_FILES -DCONFIG_BASESYSTEMROOT -DCONFIG_UNION_MOUNTS -DCONFIG_FILE_LEASES -DCONFIG_IOCOUNT_TRACE -DNFSSERVER -DCONFIG_NETBOOT -DIPSEC -DIPSEC_ESP -DCRYPTO_SHA2 -DENCRYPTED_SWAP -DCONFIG_IMG4 -DIF_BRIDGE -DCONFIG_KN_HASHSIZE="64" -DCONFIG_VNODES="263168" -DCONFIG_NC_HASH="4096" -DCONFIG_VFS_NAMES="4096" -DCONFIG_MAX_CLUSTERS="8" -DCONFIG_MIN_NBUF="256" -DCONFIG_MIN_NIOBUF="128" -DCONFIG_NMBCLUSTERS="((1024 * 512) / MCLBYTES)" -DCONFIG_TCBHASHSIZE="4096" -DCONFIG_AIO_MAX="90" -DCONFIG_AIO_PROCESS_MAX="16" -DCONFIG_AIO_THREAD_COUNT="4" -DCONFIG_MAXVIFS="32" -DCONFIG_MFCTBLSIZ="256" -DCONFIG_MSG_BSIZE_REL="131072" -DCONFIG_MSG_BSIZE_DEV="131072" -DCONFIG_MSG_BSIZE="CONFIG_MSG_BSIZE_DEV" -DCONFIG_IPC_TABLE_ENTRIES_SIZE_MAX="7340032" -DCONFIG_IPC_TABLE_REQUEST_SIZE_MAX="2097152" -DCONFIG_IPC_KERNEL_MAP_SIZE="64" -DCONFIG_PMAP_PPL -DCONFIG_DYNAMIC_CODE_SIGNING -DCONFIG_SECOND_STATIC_TRUST_CACHE -DCONFIG_SUPPLEMENTAL_SIGNATURES -DCONFIG_CODE_DECRYPTION -DCONFIG_PROTECT -DCONFIG_MEMORYSTATUS -DCONFIG_DEFERRED_RECLAIM -DCONFIG_PHYS_WRITE_ACCT -DVM_PRESSURE_EVENTS -DCONFIG_LEDGER_INTERVAL_MAX -DCONFIG_IOSCHED -DCONFIG_IO_ACCOUNTING -DIMPORTANCE_INHERITANCE -DIMPORTANCE_TRACE -DCONFIG_TELEMETRY -DCONFIG_PROC_UUID_POLICY -DCONFIG_ECC_LOGGING -DCONFIG_COREDUMP -DCONFIG_VNGUARD -DCONFIG_PV_TICKET -DIOKITCPP -DIOKITSTATS -DCONFIG_SLEEP -DCONFIG_MAX_THREADS="500" -DNO_KERNEL_HID -DCONFIG_BLOCKS -DCONFIG_KEC_FIPS -DCONFIG_PERSONAS -DCONFIG_MACF -DCONFIG_MACF_SOCKET_SUBSET -DCONFIG_AUDIT -DCONFIG_ARCADE -DCONFIG_SETUID -DCONFIG_SECURE_BSD_ROOT -DCONFIG_KAS_INFO -DCONFIG_PROC_RESOURCE_LIMITS -DMACH_ASSERT -DCONFIG_ZLEAKS -DCONFIG_VOUCHER_DEPRECATED -DLOCK_STATS -DKPERF -DCONFIG_IOTRACE -DPGO -DDEVELOPMENT -DMACH_BSD -DIOKIT -DCONFIG_THREAD_MAX="2560" -DCONFIG_TASK_MAX="1024" -DCONFIG_ZONE_MAP_MIN="120586240" -DCONFIG_VC_PROGRESS_WHITE -DCONFIG_SCHED_TIMESHARE_CORE -DCONFIG_CLUTCH -DCONFIG_SCHED_AUTO_JOIN -DCONFIG_SCHED_SFI -DCONFIG_PROB_GZALLOC -DCONFIG_SCHED_DEFERRED_AST -DCONFIG_PREADOPT_TG -DMACH_KDP -DCONFIG_SERIAL_KDP -DCONFIG_KDP_INTERACTIVE_DEBUGGING -DCONFIG_KDP_COREDUMP_ENCRYPTION -DCONFIG_TASKWATCH -DCONFIG_USER_NOTIFICATION -DCONFIG_XNUPOST -DPROC_REF_DEBUG -DCONFIG_ATM -DCONFIG_COALITIONS -DCONFIG_SYSDIAGNOSE -DCONFIG_CSR -DCONFIG_CSR_FROM_DT -DSERIAL_CONSOLE -DVIDEO_CONSOLE -DCONFIG_REQUIRES_U32_MUNGING -DCONFIG_MACH_BRIDGE_RECV_TIME -DCONFIG_QUIESCE_COUNTER -DCONFIG_ARM_PFZ -DCONFIG_DARKBOOT -DCONFIG_SERVICE_PORT_INFO -DCONFIG_DELAY_IDLE_SLEEP -DCONFIG_PROC_UDATA_STORAGE -DSCHED_HYGIENE_DEBUG -DCONFIG_DEBUG_SYSCALL_REJECTION -DCONFIG_EXT_PANICLOG -DCONFIG_TASK_SUSPEND_STATS -DCONFIG_BTI_TELEMETRY -DALTERNATE_DEBUGGER -DCONFIG_MACH_APPROXIMATE_TIME -DCONFIG_KERNEL_INTEGRITY -DCONFIG_MACF_LAZY_VNODE_LABELS -DCONFIG_HYPERVISOR_PUBLIC -DCONFIG_RESLIDE_SHARED_CACHE
OSFMK_MACHINE=arm64
#
# Mach Operating System
# Copyright (c) 1986 Carnegie-Mellon University
# All rights reserved.  The CMU software License Agreement specifies
# the terms and conditions for use and redistribution.
#

export MakeInc_cmd=${SRCROOT}/makedefs/MakeInc.cmd
export MakeInc_def=${SRCROOT}/makedefs/MakeInc.def
export MakeInc_rule=${SRCROOT}/makedefs/MakeInc.rule
export MakeInc_dir=${SRCROOT}/makedefs/MakeInc.dir

include $(MakeInc_cmd)
include $(MakeInc_def)

#
# CFLAGS
#
CFLAGS+= -include meta_features.h -DLIBKERN_KERNEL_PRIVATE -DOSALLOCDEBUG=1
SFLAGS+= -include meta_features.h

# Runtime support functions don't interact well with LTO (9294679)
stack_protector.o_CFLAGS_ADD += $(CFLAGS_NOLTO_FLAG)

#
# Directories for mig generated files
#
COMP_SUBDIRS =

#
#  Make sure we don't remove this by accident if interrupted at the wrong
#  time.
#
.PRECIOUS: Makefile

#
#  Theses macros are filled in by the config program depending on the
#  current configuration.  The MACHDEP macro is replaced by the
#  contents of the machine dependent makefile template and the others
#  are replaced by the corresponding symbol definitions for the
#  configuration.
#

OBJS=OSAtomicOperations.o OSSpinLock.o OSDebug.cpo OSMetaClass.cpo \
	OSObject.cpo OSArray.cpo OSBoolean.cpo OSCollection.cpo \
	OSCollectionIterator.cpo OSData.cpo OSDictionary.cpo \
	OSIterator.cpo OSKext.cpo OSNumber.cpo OSOrderedSet.cpo \
	OSRuntime.cpo OSRuntimeSupport.o OSSerialize.cpo OSSet.cpo \
	OSString.cpo OSSymbol.cpo OSUnserialize.cpo OSUnserializeXML.cpo \
	OSSerializeBinary.cpo OSValueObject.cpo priority_queue.cpo \
	coreanalytics_shim.cpo OSKextLib.cpo mkext.o OSKextVersion.o \
	inet_aton.o inet_ntoa.o inet_ntop.o inet_pton.o scanf.o uuid.o \
	log.o log_encode.o log_mem.o log_queue.o object.o internal.o \
	refcnt.o system_event_log.o kernel_mach_header.o adler32.o \
	compress.o z_crc32.o deflate.o infback.o inffast.o inflate.o \
	inftrees.o trees.o uncompr.o zutil.o register_crypto.o \
	corecrypto_sha2.o corecrypto_sha1.o corecrypto_md5.o \
	corecrypto_des.o corecrypto_aes.o corecrypto_aesxts.o \
	corecrypto_rand.o corecrypto_rsa.o corecrypto_chacha20poly1305.o \
	coretrust.o apple_encrypted_archive.o interface.o dlxk.o amfi.o \
	stack_protector.o ptrauth_utils.o runtime.cpo libclosuredata.o \
	compression.o 

LIBOBJS=

CFILES=\
	$(SOURCE_DIR)/libkern/gen/OSAtomicOperations.c \
	$(SOURCE_DIR)/libkern/gen/OSSpinLock.c \
	$(SOURCE_DIR)/libkern/c++/OSRuntimeSupport.c \
	$(SOURCE_DIR)/libkern/mkext.c \
	$(SOURCE_DIR)/libkern/OSKextVersion.c \
	$(SOURCE_DIR)/libkern/net/inet_aton.c \
	$(SOURCE_DIR)/libkern/net/inet_ntoa.c \
	$(SOURCE_DIR)/libkern/net/inet_ntop.c \
	$(SOURCE_DIR)/libkern/net/inet_pton.c \
	$(SOURCE_DIR)/libkern/stdio/scanf.c \
	$(SOURCE_DIR)/libkern/uuid/uuid.c \
	$(SOURCE_DIR)/libkern/os/log.c \
	$(SOURCE_DIR)/libkern/os/log_encode.c \
	$(SOURCE_DIR)/libkern/os/log_mem.c \
	$(SOURCE_DIR)/libkern/os/log_queue.c \
	$(SOURCE_DIR)/libkern/os/object.c \
	$(SOURCE_DIR)/libkern/os/internal.c \
	$(SOURCE_DIR)/libkern/os/refcnt.c \
	$(SOURCE_DIR)/libkern/os/system_event_log.c \
	$(SOURCE_DIR)/libkern/kernel_mach_header.c \
	$(SOURCE_DIR)/libkern/zlib/adler32.c \
	$(SOURCE_DIR)/libkern/zlib/compress.c \
	$(SOURCE_DIR)/libkern/zlib/z_crc32.c \
	$(SOURCE_DIR)/libkern/zlib/deflate.c \
	$(SOURCE_DIR)/libkern/zlib/infback.c \
	$(SOURCE_DIR)/libkern/zlib/inffast.c \
	$(SOURCE_DIR)/libkern/zlib/inflate.c \
	$(SOURCE_DIR)/libkern/zlib/inftrees.c \
	$(SOURCE_DIR)/libkern/zlib/trees.c \
	$(SOURCE_DIR)/libkern/zlib/uncompr.c \
	$(SOURCE_DIR)/libkern/zlib/zutil.c \
	$(SOURCE_DIR)/libkern/crypto/register_crypto.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_sha2.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_sha1.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_md5.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_des.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_aes.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_aesxts.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_rand.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_rsa.c \
	$(SOURCE_DIR)/libkern/crypto/corecrypto_chacha20poly1305.c \
	$(SOURCE_DIR)/libkern/coretrust/coretrust.c \
	$(SOURCE_DIR)/libkern/apple_encrypted_archive/apple_encrypted_archive.c \
	$(SOURCE_DIR)/libkern/img4/interface.c \
	$(SOURCE_DIR)/libkern/image4/dlxk.c \
	$(SOURCE_DIR)/libkern/amfi/amfi.c \
	$(SOURCE_DIR)/libkern/stack_protector.c \
	$(SOURCE_DIR)/libkern/ptrauth_utils.c \
	$(SOURCE_DIR)/libkern/libclosure/libclosuredata.c \
	$(SOURCE_DIR)/libkern/compression/compression.c 
COBJS=OSAtomicOperations.o OSSpinLock.o OSRuntimeSupport.o mkext.o \
	OSKextVersion.o inet_aton.o inet_ntoa.o inet_ntop.o inet_pton.o \
	scanf.o uuid.o log.o log_encode.o log_mem.o log_queue.o object.o \
	internal.o refcnt.o system_event_log.o kernel_mach_header.o \
	adler32.o compress.o z_crc32.o deflate.o infback.o inffast.o \
	inflate.o inftrees.o trees.o uncompr.o zutil.o register_crypto.o \
	corecrypto_sha2.o corecrypto_sha1.o corecrypto_md5.o \
	corecrypto_des.o corecrypto_aes.o corecrypto_aesxts.o \
	corecrypto_rand.o corecrypto_rsa.o corecrypto_chacha20poly1305.o \
	coretrust.o apple_encrypted_archive.o interface.o dlxk.o amfi.o \
	stack_protector.o ptrauth_utils.o libclosuredata.o compression.o 

CXXFILES=\
	$(SOURCE_DIR)/libkern/gen/OSDebug.cpp \
	$(SOURCE_DIR)/libkern/c++/OSMetaClass.cpp \
	$(SOURCE_DIR)/libkern/c++/OSObject.cpp \
	$(SOURCE_DIR)/libkern/c++/OSArray.cpp \
	$(SOURCE_DIR)/libkern/c++/OSBoolean.cpp \
	$(SOURCE_DIR)/libkern/c++/OSCollection.cpp \
	$(SOURCE_DIR)/libkern/c++/OSCollectionIterator.cpp \
	$(SOURCE_DIR)/libkern/c++/OSData.cpp \
	$(SOURCE_DIR)/libkern/c++/OSDictionary.cpp \
	$(SOURCE_DIR)/libkern/c++/OSIterator.cpp \
	$(SOURCE_DIR)/libkern/c++/OSKext.cpp \
	$(SOURCE_DIR)/libkern/c++/OSNumber.cpp \
	$(SOURCE_DIR)/libkern/c++/OSOrderedSet.cpp \
	$(SOURCE_DIR)/libkern/c++/OSRuntime.cpp \
	$(SOURCE_DIR)/libkern/c++/OSSerialize.cpp \
	$(SOURCE_DIR)/libkern/c++/OSSet.cpp \
	$(SOURCE_DIR)/libkern/c++/OSString.cpp \
	$(SOURCE_DIR)/libkern/c++/OSSymbol.cpp \
	$(SOURCE_DIR)/libkern/c++/OSUnserialize.cpp \
	$(SOURCE_DIR)/libkern/c++/OSUnserializeXML.cpp \
	$(SOURCE_DIR)/libkern/c++/OSSerializeBinary.cpp \
	$(SOURCE_DIR)/libkern/c++/OSValueObject.cpp \
	$(SOURCE_DIR)/libkern/c++/priority_queue.cpp \
	$(SOURCE_DIR)/libkern/coreanalytics/coreanalytics_shim.cpp \
	$(SOURCE_DIR)/libkern/OSKextLib.cpp \
	$(SOURCE_DIR)/libkern/libclosure/runtime.cpp 
CXXOBJS=OSDebug.cpo OSMetaClass.cpo OSObject.cpo OSArray.cpo \
	OSBoolean.cpo OSCollection.cpo OSCollectionIterator.cpo \
	OSData.cpo OSDictionary.cpo OSIterator.cpo OSKext.cpo \
	OSNumber.cpo OSOrderedSet.cpo OSRuntime.cpo OSSerialize.cpo \
	OSSet.cpo OSString.cpo OSSymbol.cpo OSUnserialize.cpo \
	OSUnserializeXML.cpo OSSerializeBinary.cpo OSValueObject.cpo \
	priority_queue.cpo coreanalytics_shim.cpo OSKextLib.cpo \
	runtime.cpo 

SFILES=
SOBJS=

######################################################################
#BEGIN	Machine dependent Makefile fragment for arm
######################################################################
#
# XXX: CFLAGS
#
CWARNFLAGS   = $(CWARNFLAGS_STD) -Wshorten-64-to-32 -Wimplicit-int-conversion
CXXWARNFLAGS = $(CXXWARNFLAGS_STD) -Wshorten-64-to-32 -Wimplicit-int-conversion

OSSymbol.cpo_INCFLAGS += -I$(SRCROOT)/osfmk

######################################################################
#END	Machine dependent Makefile fragment for arm
######################################################################

#
# Machine-independent per-file flags
#

#
# Diagnostic opt-outs.  We need to make this list empty.
#
# DO NOT ADD MORE HERE.
#
# -Wno-cast-align
OSKext.cpo_CXXWARNFLAGS_ADD += -Wno-cast-align
OSKextLib.cpo_CXXWARNFLAGS_ADD += -Wno-cast-align
OSMetaClass.cpo_CXXWARNFLAGS_ADD += -Wno-cast-align
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-cast-align
corecrypto_md5.o_CWARNFLAGS_ADD += -Wno-cast-align
corecrypto_sha1.o_CWARNFLAGS_ADD += -Wno-cast-align
# -Wno-cast-qual
OSKext.cpo_CXXWARNFLAGS_ADD += -Wno-cast-qual
compress.o_CWARNFLAGS_ADD += -Wno-cast-qual
deflate.o_CWARNFLAGS_ADD += -Wno-cast-qual
runtime.cpo_CXXWARNFLAGS_ADD += -Wno-cast-qual
trees.o_CWARNFLAGS_ADD += -Wno-cast-qual
uncompr.o_CWARNFLAGS_ADD += -Wno-cast-qual
# -Wno-implicit-int-conversion
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-implicit-int-conversion
OSUnserializeXML.cpo_CXXWARNFLAGS_ADD += -Wno-implicit-int-conversion
kxld_sym.o_CWARNFLAGS_ADD += -Wno-implicit-int-conversion
log.o_CWARNFLAGS_ADD += -Wno-implicit-int-conversion
scanf.o_CWARNFLAGS_ADD += -Wno-implicit-int-conversion
# -Wno-missing-prototypes
OSRuntime.cpo_CXXWARNFLAGS_ADD += -Wno-missing-prototypes
# -Wno-shorten-64-to-32
OSKext.cpo_CXXWARNFLAGS_ADD += -Wno-shorten-64-to-32
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-shorten-64-to-32
OSUnserializeXML.cpo_CXXWARNFLAGS_ADD += -Wno-shorten-64-to-32
log.o_CWARNFLAGS_ADD += -Wno-shorten-64-to-32
scanf.o_CWARNFLAGS_ADD += -Wno-shorten-64-to-32
# -Wno-sign-conversion
OSCollection.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSData.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSDebug.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSKext.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSKextVersion.o_CWARNFLAGS_ADD += -Wno-sign-conversion
OSMetaClass.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSNumber.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSObject.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSRuntime.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSSerializeBinary.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSSet.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSString.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSUnserializeXML.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
OSValueObject.cpo_CXXWARNFLAGS_ADD += -Wno-sign-conversion
adler32.o_CWARNFLAGS_ADD += -Wno-sign-conversion
corecrypto_aes.o_CWARNFLAGS_ADD += -Wno-sign-conversion
corecrypto_aesxts.o_CWARNFLAGS_ADD += -Wno-sign-conversion
deflate.o_CWARNFLAGS_ADD += -Wno-sign-conversion
inet_aton.o_CWARNFLAGS_ADD += -Wno-sign-conversion
infback.o_CWARNFLAGS_ADD += -Wno-sign-conversion
inflate.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_array.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_copyright.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_dict.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_object.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_reloc.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_sym.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_symtab.o_CWARNFLAGS_ADD += -Wno-sign-conversion
kxld_util.o_CWARNFLAGS_ADD += -Wno-sign-conversion
log.o_CWARNFLAGS_ADD += -Wno-sign-conversion
refcnt.o_CWARNFLAGS_ADD += -Wno-sign-conversion
scanf.o_CWARNFLAGS_ADD += -Wno-sign-conversion
trees.o_CWARNFLAGS_ADD += -Wno-sign-conversion
uuid.o_CWARNFLAGS_ADD += -Wno-sign-conversion
# -Wno-unreachable-code
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-unreachable-code
OSUnserializeXML.cpo_CXXWARNFLAGS_ADD += -Wno-unreachable-code
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-unreachable-code-break
OSUnserializeXML.cpo_CXXWARNFLAGS_ADD += -Wno-unreachable-code-break
# -Wno-zero-as-null-pointer-constant
OSUnserialize.cpo_CXXWARNFLAGS_ADD += -Wno-zero-as-null-pointer-constant
OSUnserializeXML.cpo_CXXWARNFLAGS_ADD += -Wno-zero-as-null-pointer-constant

# Rebuild if per-file overrides change
${OBJS}: $(firstword $(MAKEFILE_LIST))

# Rebuild if global compile flags change
$(COBJS): .CFLAGS
.CFLAGS: ALWAYS
	$(_v)$(REPLACECONTENTS) $@ $(KCC) $(CFLAGS) $(INCFLAGS)
$(CXXOBJS): .CXXFLAGS
.CXXFLAGS: ALWAYS
	$(_v)$(REPLACECONTENTS) $@ $(KC++) $(CXXFLAGS) $(INCFLAGS)
$(SOBJS): .SFLAGS
.SFLAGS: ALWAYS
	$(_v)$(REPLACECONTENTS) $@ $(S_KCC) $(SFLAGS) $(INCFLAGS)

$(COMPONENT).filelist: $(OBJS)
	$(_v)for hib_file in ${HIB_FILES}; \
	do	\
		$(SEG_HACK) -n __HIB -o $${hib_file}__ $${hib_file} || exit 1; \
		mv $${hib_file}__ $${hib_file} || exit 1; \
	done
	@$(LOG_LDFILELIST) "$(COMPONENT)"
	$(_v)for obj in ${OBJS}; do	\
		 $(ECHO) $(TARGET)/$(CURRENT_KERNEL_CONFIG)/$${obj}; \
	done > $(COMPONENT).filelist

$(COMPONENT).libfilelist: $(LIBOBJS)
	@$(LOG_LDFILELIST) "lib$(COMPONENT)"
	$(_v)for obj in ${LIBOBJS}; do	\
		 $(ECHO) $(TARGET)/$(CURRENT_KERNEL_CONFIG)/$${obj}; \
	done > $(COMPONENT).libfilelist

ifeq ($(RC_ProjectName),xnu_libraries)
do_all: $(COMPONENT).libfilelist
else
do_all: $(COMPONENT).filelist
endif

do_build_all:: do_all

-include OSAtomicOperations.d
OSAtomicOperations.o: $(SOURCE_DIR)/libkern/gen/OSAtomicOperations.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/gen/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/gen/${C_RULE_4B})
-include OSSpinLock.d
OSSpinLock.o: $(SOURCE_DIR)/libkern/gen/OSSpinLock.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/gen/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/gen/${C_RULE_4B})
-include OSDebug.cpd
OSDebug.cpo: $(SOURCE_DIR)/libkern/gen/OSDebug.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/gen/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/gen/${P_RULE_4B})
-include OSMetaClass.cpd
OSMetaClass.cpo: $(SOURCE_DIR)/libkern/c++/OSMetaClass.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSObject.cpd
OSObject.cpo: $(SOURCE_DIR)/libkern/c++/OSObject.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSArray.cpd
OSArray.cpo: $(SOURCE_DIR)/libkern/c++/OSArray.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSBoolean.cpd
OSBoolean.cpo: $(SOURCE_DIR)/libkern/c++/OSBoolean.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSCollection.cpd
OSCollection.cpo: $(SOURCE_DIR)/libkern/c++/OSCollection.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSCollectionIterator.cpd
OSCollectionIterator.cpo: $(SOURCE_DIR)/libkern/c++/OSCollectionIterator.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSData.cpd
OSData.cpo: $(SOURCE_DIR)/libkern/c++/OSData.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSDictionary.cpd
OSDictionary.cpo: $(SOURCE_DIR)/libkern/c++/OSDictionary.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSIterator.cpd
OSIterator.cpo: $(SOURCE_DIR)/libkern/c++/OSIterator.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSKext.cpd
OSKext.cpo: $(SOURCE_DIR)/libkern/c++/OSKext.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSNumber.cpd
OSNumber.cpo: $(SOURCE_DIR)/libkern/c++/OSNumber.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSOrderedSet.cpd
OSOrderedSet.cpo: $(SOURCE_DIR)/libkern/c++/OSOrderedSet.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSRuntime.cpd
OSRuntime.cpo: $(SOURCE_DIR)/libkern/c++/OSRuntime.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSRuntimeSupport.d
OSRuntimeSupport.o: $(SOURCE_DIR)/libkern/c++/OSRuntimeSupport.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/c++/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/c++/${C_RULE_4B})
-include OSSerialize.cpd
OSSerialize.cpo: $(SOURCE_DIR)/libkern/c++/OSSerialize.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSSet.cpd
OSSet.cpo: $(SOURCE_DIR)/libkern/c++/OSSet.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSString.cpd
OSString.cpo: $(SOURCE_DIR)/libkern/c++/OSString.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSSymbol.cpd
OSSymbol.cpo: $(SOURCE_DIR)/libkern/c++/OSSymbol.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSUnserialize.cpd
OSUnserialize.cpo: $(SOURCE_DIR)/libkern/c++/OSUnserialize.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSUnserializeXML.cpd
OSUnserializeXML.cpo: $(SOURCE_DIR)/libkern/c++/OSUnserializeXML.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSSerializeBinary.cpd
OSSerializeBinary.cpo: $(SOURCE_DIR)/libkern/c++/OSSerializeBinary.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include OSValueObject.cpd
OSValueObject.cpo: $(SOURCE_DIR)/libkern/c++/OSValueObject.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include priority_queue.cpd
priority_queue.cpo: $(SOURCE_DIR)/libkern/c++/priority_queue.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/c++/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/c++/${P_RULE_4B})
-include coreanalytics_shim.cpd
coreanalytics_shim.cpo: $(SOURCE_DIR)/libkern/coreanalytics/coreanalytics_shim.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/coreanalytics/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/coreanalytics/${P_RULE_4B})
-include OSKextLib.cpd
OSKextLib.cpo: $(SOURCE_DIR)/libkern/OSKextLib.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/${P_RULE_4B})
-include mkext.d
mkext.o: $(SOURCE_DIR)/libkern/mkext.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/${C_RULE_4B})
-include OSKextVersion.d
OSKextVersion.o: $(SOURCE_DIR)/libkern/OSKextVersion.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/${C_RULE_4B})
-include inet_aton.d
inet_aton.o: $(SOURCE_DIR)/libkern/net/inet_aton.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/net/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/net/${C_RULE_4B})
-include inet_ntoa.d
inet_ntoa.o: $(SOURCE_DIR)/libkern/net/inet_ntoa.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/net/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/net/${C_RULE_4B})
-include inet_ntop.d
inet_ntop.o: $(SOURCE_DIR)/libkern/net/inet_ntop.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/net/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/net/${C_RULE_4B})
-include inet_pton.d
inet_pton.o: $(SOURCE_DIR)/libkern/net/inet_pton.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/net/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/net/${C_RULE_4B})
-include scanf.d
scanf.o: $(SOURCE_DIR)/libkern/stdio/scanf.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/stdio/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/stdio/${C_RULE_4B})
-include uuid.d
uuid.o: $(SOURCE_DIR)/libkern/uuid/uuid.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/uuid/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/uuid/${C_RULE_4B})
-include log.d
log.o: $(SOURCE_DIR)/libkern/os/log.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include log_encode.d
log_encode.o: $(SOURCE_DIR)/libkern/os/log_encode.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include log_mem.d
log_mem.o: $(SOURCE_DIR)/libkern/os/log_mem.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include log_queue.d
log_queue.o: $(SOURCE_DIR)/libkern/os/log_queue.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include object.d
object.o: $(SOURCE_DIR)/libkern/os/object.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include internal.d
internal.o: $(SOURCE_DIR)/libkern/os/internal.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include refcnt.d
refcnt.o: $(SOURCE_DIR)/libkern/os/refcnt.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include system_event_log.d
system_event_log.o: $(SOURCE_DIR)/libkern/os/system_event_log.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/os/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/os/${C_RULE_4B})
-include kernel_mach_header.d
kernel_mach_header.o: $(SOURCE_DIR)/libkern/kernel_mach_header.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/${C_RULE_4B})
-include adler32.d
adler32.o: $(SOURCE_DIR)/libkern/zlib/adler32.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include compress.d
compress.o: $(SOURCE_DIR)/libkern/zlib/compress.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include z_crc32.d
z_crc32.o: $(SOURCE_DIR)/libkern/zlib/z_crc32.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include deflate.d
deflate.o: $(SOURCE_DIR)/libkern/zlib/deflate.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include infback.d
infback.o: $(SOURCE_DIR)/libkern/zlib/infback.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include inffast.d
inffast.o: $(SOURCE_DIR)/libkern/zlib/inffast.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include inflate.d
inflate.o: $(SOURCE_DIR)/libkern/zlib/inflate.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include inftrees.d
inftrees.o: $(SOURCE_DIR)/libkern/zlib/inftrees.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include trees.d
trees.o: $(SOURCE_DIR)/libkern/zlib/trees.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include uncompr.d
uncompr.o: $(SOURCE_DIR)/libkern/zlib/uncompr.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include zutil.d
zutil.o: $(SOURCE_DIR)/libkern/zlib/zutil.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/zlib/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/zlib/${C_RULE_4B})
-include register_crypto.d
register_crypto.o: $(SOURCE_DIR)/libkern/crypto/register_crypto.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_sha2.d
corecrypto_sha2.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_sha2.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_sha1.d
corecrypto_sha1.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_sha1.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_md5.d
corecrypto_md5.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_md5.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_des.d
corecrypto_des.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_des.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_aes.d
corecrypto_aes.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_aes.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_aesxts.d
corecrypto_aesxts.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_aesxts.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_rand.d
corecrypto_rand.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_rand.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_rsa.d
corecrypto_rsa.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_rsa.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include corecrypto_chacha20poly1305.d
corecrypto_chacha20poly1305.o: $(SOURCE_DIR)/libkern/crypto/corecrypto_chacha20poly1305.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/crypto/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/crypto/${C_RULE_4B})
-include coretrust.d
coretrust.o: $(SOURCE_DIR)/libkern/coretrust/coretrust.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/coretrust/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/coretrust/${C_RULE_4B})
-include apple_encrypted_archive.d
apple_encrypted_archive.o: $(SOURCE_DIR)/libkern/apple_encrypted_archive/apple_encrypted_archive.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/apple_encrypted_archive/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/apple_encrypted_archive/${C_RULE_4B})
-include interface.d
interface.o: $(SOURCE_DIR)/libkern/img4/interface.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/img4/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/img4/${C_RULE_4B})
-include dlxk.d
dlxk.o: $(SOURCE_DIR)/libkern/image4/dlxk.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/image4/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/image4/${C_RULE_4B})
-include amfi.d
amfi.o: $(SOURCE_DIR)/libkern/amfi/amfi.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/amfi/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/amfi/${C_RULE_4B})
-include stack_protector.d
stack_protector.o: $(SOURCE_DIR)/libkern/stack_protector.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/${C_RULE_4B})
-include ptrauth_utils.d
ptrauth_utils.o: $(SOURCE_DIR)/libkern/ptrauth_utils.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/${C_RULE_4B})
-include runtime.cpd
runtime.cpo: $(SOURCE_DIR)/libkern/libclosure/runtime.cpp
	${P_RULE_0}
	${P_RULE_1A} $(SOURCE_DIR)/libkern/libclosure/${P_RULE_1B}
	${P_RULE_2}
	${P_RULE_3}
	$(if ${P_RULE_4A},${P_RULE_4A}$(SOURCE_DIR)/libkern/libclosure/${P_RULE_4B})
-include libclosuredata.d
libclosuredata.o: $(SOURCE_DIR)/libkern/libclosure/libclosuredata.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/libclosure/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/libclosure/${C_RULE_4B})
-include compression.d
compression.o: $(SOURCE_DIR)/libkern/compression/compression.c
	${C_RULE_0}
	${C_RULE_1A} $(SOURCE_DIR)/libkern/compression/${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	$(if ${C_RULE_4A},${C_RULE_4A}$(SOURCE_DIR)/libkern/compression/${C_RULE_4B})

include $(MakeInc_rule)
include $(MakeInc_dir)
